#Cats vs dogs classification using SVM
import numpy as np
import os
import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from tqdm import tqdm
import zipfile
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Mount Google Drive (optional)
from google.colab import drive
drive.mount('/content/drive')

# Step 2: Extract Dataset
zip_path = "/content/drive/MyDrive/archive.zip"
extract_path = "/content/dataset"
if not os.path.exists(extract_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_path)
print("Extraction complete! Files extracted to:", extract_path)

# Step 3: Define data_dir and categories
data_dir = os.path.join(extract_path, "animals") 
categories = ['cat', 'dog']                      

# Step 4: Load and Preprocess Data
data = []
img_size = 64  # Resize all images to 64x64

for category in categories:
    folder = os.path.join(data_dir, category)
    label = categories.index(category)  # 0 for cat, 1 for dog

    if os.path.exists(folder):
        print(f"Loading {category} images from {folder}...")
        for img in tqdm(os.listdir(folder)[:1000]):  # LIMIT TO 1000 per class
            try:
                img_path = os.path.join(folder, img)
                img_arr = cv2.imread(img_path, cv2.IMREAD_COLOR)
                img_arr = cv2.resize(img_arr, (img_size, img_size))
                data.append([img_arr, label])
            except Exception as e:
                print(f"Error processing image {img_path}: {e}")
                pass
    else:
        print(f"Directory not found: {folder}")

if len(data) == 0:
    raise ValueError("No images found. Check dataset path!")

# Step 5: Create Features and Labels
X = np.array([features for features, _ in data])
y = np.array([label for _, label in data])

X = X.reshape(len(X), -1)  # Flatten images
X = X / 255.0  # Normalize

print("Data prepared! Shape of X:", X.shape, "Shape of y:", y.shape)

# Step 6: Split Dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Train SVM Model
svm_model = SVC(kernel='linear', verbose=True)
svm_model.fit(X_train, y_train)

# Step 8: Evaluate Model
y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")


#Step 9: Visualization
def show_predictions():
    plt.figure(figsize=(15, 12))
    rows, cols = 5, 5 # 5 rows, 5 columns

    for i in range(rows * cols):
        idx = np.random.randint(0, len(X_test))  # Random image index
        img = X_test[idx].reshape(img_size, img_size, 3)
        true_label = y_test[idx]
        pred_label = svm_model.predict([X_test[idx]])[0]

        plt.subplot(rows, cols, i + 1)
        plt.imshow(img)
        plt.title(f"Pred: {'Cat' if pred_label == 0 else 'Dog'}\nTrue: {'Cat' if true_label == 0 else 'Dog'}")
        plt.axis('off')

    plt.tight_layout()
    plt.show()

# Call the function
show_predictions()
# Store resized 64x64 images for visualization
images = [features for features, _ in data] 
X = np.array(images).reshape(len(images), -1) / 255.0
y = np.array([label for _, label in data])


