#Hand Gestures Classification
from zipfile import ZipFile
from google.colab import files

# Upload ZIP
uploaded = files.upload()  # Select your 'hand_sign.zip'

# Extract it
with ZipFile("hand_sign.zip", 'r') as zip_ref:
    zip_ref.extractall("hand_sign")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout


#Load train and test data
train_df = pd.read_csv("hand_sign/sign_mnist_train.csv")
test_df = pd.read_csv("hand_sign/sign_mnist_test.csv")

print("Train shape:", train_df.shape)
print("Test shape:", test_df.shape)
train_df.head()

# Split features and labels
X_train = train_df.drop('label', axis=1).values
y_train = train_df['label'].values

X_test = test_df.drop('label', axis=1).values
y_test = test_df['label'].values

# Normalize and reshape
X_train = X_train.reshape(-1, 28, 28, 1) / 255.0
X_test = X_test.reshape(-1, 28, 28, 1) / 255.0

# One-hot encoding
y_train = to_categorical(y_train, num_classes=25)
y_test = to_categorical(y_test, num_classes=25)

plt.figure(figsize=(10, 4))
for i in range(10):
    plt.subplot(2, 5, i + 1)
    plt.imshow(X_train[i].reshape(28, 28), cmap="gray")
    plt.title(f"Label: {np.argmax(y_train[i])}")
    plt.axis("off")
plt.tight_layout()
plt.show()

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.4),
    Dense(25, activation='softmax')  # 25 output classes
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"\nTest Accuracy: {test_acc:.4f}")

import matplotlib.pyplot as plt
import random
import string
import cv2
import numpy as np

# Letters (excluding J and Z)
letters = [ch for ch in string.ascii_uppercase if ch not in ['J', 'Z']]

# Word mappings
meanings = {
    'A': 'Apple', 'B': 'Ball', 'C': 'Come here', 'D': 'Donâ€™t', 'E': 'Enough',
    'F': 'Fine', 'G': 'Go', 'H': 'Help', 'I': 'I / Me', 'K': 'Keep',
    'L': 'Look', 'M': 'More', 'N': 'No', 'O': 'Okay', 'P': 'Please',
    'Q': 'Quick', 'R': 'Ready', 'S': 'Stop', 'T': 'Thanks', 'U': 'Up',
    'V': 'Victory', 'W': 'Wait', 'X': 'Exit', 'Y': 'Yes'
}

# Plot 4 images in a single row
plt.figure(figsize=(12, 3))  # Wide layout, short height

for i in range(4):
    idx = random.randint(0, len(X_test) - 1)
    img = X_test[idx].reshape(28, 28)
    img_resized = cv2.resize(img, (56, 56), interpolation=cv2.INTER_AREA)  # Smaller, cleaner

    pred = model.predict(img.reshape(1, 28, 28, 1), verbose=0)
    pred_idx = np.argmax(pred)
    letter = letters[pred_idx]
    word = meanings.get(letter, "Unknown")

    plt.subplot(1, 4, i + 1)
    plt.imshow(img_resized, cmap='gray')
    plt.title(f"{letter} - {word}", fontsize=10)
    plt.axis('off')

plt.tight_layout()
plt.show()
